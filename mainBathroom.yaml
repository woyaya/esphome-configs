#------- User configure START -------
substitutions:
  config_version: 'v2025.06.15'
  #This is the name of the node. 
  #It should always be unique in your ESPhome network. 
  #May only contain lowercase characters, digits and underscores.
  device_name: mainbathroom
  #If enabled, directly connects to WiFi network without doing a full scan first. 
  #This is required for hidden networks and can significantly improve connection times. 
  #The downside is that this option connects to the first network the ESP sees, 
  #even if that network is very far away and better ones are available.
  #Defaults to off. 
  wifi_fast_connect: 'false'
  #The amount of time to wait before rebooting when no WiFi connection exists. 
  #Can be disabled by setting this to 0s, but note that the low level IP stack 
  #currently seems to have issues with WiFi where a full reboot is required to 
  #get the interface back working. 
  #Defaults to 15min.
  wifi_reboot_timeout: 0min
  #The amount of time to wait before rebooting when no client connects to the API. 
  #This is needed because sometimes the low level ESP functions report that the 
  #ESP is connected to the network, when in fact it is not - only a full reboot fixes it. 
  #Can be disabled by setting this to 0s. 
  #Defaults to 15min.
  api_reboot_timeout: 0min

  #Sensor data IO
  sensor_data_io: GPIO14
  #Sensor control IO
  sensor_ctrl_io: GPIO13
  #Light AC power control IO
  light_ctrl_io: GPIO12
  #Fun power control IO
  fun_ctrl_io: GPIO15

#------- User configure END -------

esphome:
  name: $device_name
  platform: ESP8266
  board: esp12e
  includes:
    - SRC/uart/uart_recv.h
  on_boot:
    - priority: 800.0
      then:
        - binary_sensor.template.publish: 
            id: asrpro_state
            state: OFF
        - switch.turn_off: sensor_enable
        - delay: 20ms
        - switch.turn_on: sensor_enable
    - priority: -100
      then:
        - delay: 1s
        - switch.turn_off: fan_delay
  #指定编译临时文件存放位置
  build_path: build/$device_name

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_passwd
  reboot_timeout: $wifi_reboot_timeout
#  manual_ip:
#    static_ip: 192.168.1.203
#    gateway: 192.168.1.1
#    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $device_name
    password: !secret ap_passwd

captive_portal:

# Enable logging
######################################################
# ATTENTION:                                         #
#    Disable UART logger if zigbee module enabled!!! #
######################################################
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  #password: !secret api_passwd
  reboot_timeout: $api_reboot_timeout
  encryption:
    key: !secret api_key

ota:
  #password: !secret ota_passwd
  password: !secret ota_passwd
  platform: esphome

script:
  - id: asrpro_online
    mode: restart
    then:
      - binary_sensor.template.publish: 
          id: asrpro_state
          state: ON
      - delay: 180s
      - binary_sensor.template.publish: 
          id: asrpro_state
          state: OFF

globals:
  - id: fan_delay_on
    type: int
    restore_value: no
    initial_value: '-1'

sensor:
  - platform: wifi_signal
    name: "WiFi signal ${device_name}"
    update_interval: 60s
    filters:
      - median:
          window_size: 20
          send_every: 10
          send_first_at: 6
  - platform: uptime
    name: "Uptime ${device_name}"
#sensor:
  - platform: template
    name: "ASRPro Speech Recognition ID ${device_name}"
    id: snid
    unit_of_measurement: "No."

binary_sensor:
# system reset button
  - platform: gpio
    name: "Reset ${device_name}"
    pin: GPIO0
    internal: true
    filters:
      - invert:
      - delayed_on: 10ms
    on_press:
      then:
        - switch.toggle: Reboot
#############################################
#If esphome connected to homeassistant?
  - platform: status
    name: "Connect status ${device_name}"
    id: connect_status
#    internal: true
    on_press:
      - text_sensor.template.publish:
          id: asrpro_cmd 
          state: "MCUOnline"
    on_release:
      - text_sensor.template.publish:
          id: asrpro_cmd 
          state: "MCUOffline"
#############################################
#binary_sensor:
#sensor Input
  - platform: gpio
    name: "Motion ${device_name}"
    pin: ${sensor_data_io}
    internal: false
    device_class: motion
    on_press:
      then:
        - switch.turn_on: asrpro_SR_enable
  - platform: template
    name: "ASRPro state ${device_name}"
    id: asrpro_state
#############################################
switch:
  - platform: restart
    name: "${device_name} reboot"
    id: Reboot

  - platform: template
    id: debug
    name: "ASRPro debug ${device_name}"
    optimistic: true
    #restore_state: true
    restore_mode: 'RESTORE_DEFAULT_OFF'
    turn_on_action:
      - text_sensor.template.publish:
          id: asrpro_cmd 
          state: "DebugOn"
    turn_off_action:
      - text_sensor.template.publish:
          id: asrpro_cmd 
          state: "DebugOff"
  - platform: template
    id: asrpro_SR_enable
    name: "ASRPro Speech Recognition ${device_name}"
    optimistic: true
    turn_on_action:
      - text_sensor.template.publish:
          id: asrpro_cmd 
          state: "Enable"
    turn_off_action:
      - text_sensor.template.publish:
          id: asrpro_cmd 
          state: "Disable"
  - platform: template
    id: speaker_exist
    name: "Speaker exist ${device_name}"
    optimistic: true
    #restore_state: true
    restore_mode: 'RESTORE_DEFAULT_ON'
    turn_on_action:
      - text_sensor.template.publish:
          id: asrpro_cmd 
          state: "SpeakerExist"
    turn_off_action:
      - text_sensor.template.publish:
          id: asrpro_cmd 
          state: "SpeakerNotExist"
  - platform: gpio
    id: sensor_enable
    name: "Sensor enable ${device_name}"
    pin: ${sensor_ctrl_io}
    restore_mode: ALWAYS_OFF
  - platform: template
    id: sensor_reset
    name: "Sensor reset"
    internal: true
    optimistic: true
    turn_on_action:
      - switch.turn_off: sensor_enable
      - delay: 1s
      - switch.turn_on: sensor_enable
      - switch.turn_off: sensor_reset
      - text_sensor.template.publish:
          id: asrpro_cmd 
          state: "Success"
  - platform: template
    name: "speaker ${device_name}"
    icon: "mdi:volume-high"
    id: speaker
    optimistic: true
  - platform: template
    name: "light ${device_name}"
    id: light
    icon: "mdi:lightbulb"
    optimistic: true
  - platform: template
    id: light_reset
    name: "Light reset ${device_name}"
    optimistic: true
    turn_on_action:
      - switch.turn_off: light_power
      - delay: 2s
      - switch.turn_on: light_power
      - switch.turn_off: light_reset
      - text_sensor.template.publish:
          id: asrpro_cmd 
          state: "Success"

    # If you use "inverted=true" to achieve inversion, there will be a 
    # short high pulse on the GPIO when restarting, which may cause 
    # impact on relays and devices. Therefore, inverted=false is used 
    # at the GPIO layer, and the logic inversion is performed at the 
    # switch layer.
  - platform: template
    id: light_power
    name: "light AC power ${device_name}"
    restore_mode: ALWAYS_ON
    lambda: |-
      if (id(light_power_gpio).state)
        return false;
      else
        return true;
    turn_on_action:
      - switch.turn_off: light_power_gpio
    turn_off_action:
      - switch.turn_on: light_power_gpio
  - platform: gpio
    id: light_power_gpio
    internal: true
    name: "light AC power"
    pin: ${light_ctrl_io}
    restore_mode: ALWAYS_OFF
  - platform: template
    id: fan_delay
    name: "Fan ${device_name} delay"
    icon: "mdi:fan"
    restore_mode: ALWAYS_ON
    lambda: |-
      if (id(fan_delay_on) >= 0){
        return id(fan_delay_on);
      }else{
        return id(fan).state;
      }
    turn_on_action:
      - globals.set:
          id: fan_delay_on
          value: '1'
      - wait_until:
          condition:
            switch.is_on: fan
          timeout: 600ms
      - switch.turn_on: fan
      - globals.set:
          id: fan_delay_on
          value: '-1'
    turn_off_action:
      - globals.set:
          id: fan_delay_on
          value: '0'
      - wait_until:
          condition:
            switch.is_off: fan
          timeout: 600ms
      - switch.turn_off: fan
      - globals.set:
          id: fan_delay_on
          value: '-1'
  - platform: template
    id: fan
    name: "Fan ${device_name}"
    icon: "mdi:fan"
    restore_mode: ALWAYS_ON
    lambda: |-
      if (id(fan_power_gpio).state)
        return false;
      else
        return true;
    turn_on_action:
      - switch.turn_off: fan_power_gpio
      # "fan_delay" may call "state report" before "fan" publish state
      # so we force publish 'fan' state here
      - lambda: |-
          id(fan).publish_state(true);
    turn_off_action:
      - switch.turn_on: fan_power_gpio
      # "fan_delay" may call "state report" before "fan" publish state
      # so we force publish 'fan' state here
      - lambda: |-
          id(fan).publish_state(false);
  - platform: gpio
    id: fan_power_gpio
    name: "fan power"
    internal: true
    pin: ${fun_ctrl_io}
    restore_mode: ALWAYS_OFF

number:
  - platform: template
    name: "brightness $device_name"
    id: brightness
    icon: "mdi:brightness-percent"
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    on_value:
      then:
        - lambda: |-
            if (x == 0)
              id(light).turn_off();
            else
              id(light).turn_on();
  - platform: template
    name: "volume $device_name"
    id: volume
    icon: "mdi:volume-medium"
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    on_value:
      then:
        - lambda: |-
            if (x == 0)
              id(speaker).turn_off();
            else
              id(speaker).turn_on();
  - platform: template
    name: "ASRPro volume $device_name"
    id: asrpro_volume
    icon: "mdi:volume-medium"
    optimistic: true
    unit_of_measurement: "Level"
    min_value: 1
    max_value: 7
    step: 1
    restore_value: true
    initial_value: 3
    set_action:
      then:
        - lambda: |-
            std::string state="ASRVolume:"+to_string((int)x);
            id(asrpro_cmd).publish_state(state.c_str());

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 115200

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP ${device_name}"
    ssid:
      name: "SSID ${device_name}"
    bssid:
      name: "BSSID ${device_name}"
  - platform: homeassistant
    name: "ASRPro command $device_name"
    entity_id: "input_text.asrpro_cmd_$device_name"
    on_value:
      then:
        - lambda: |-
            id(asrpro_cmd).publish_state(x.c_str());
  - platform: template
    name: "ASRPro UART $device_name"
    id: asrpro_uart
  - platform: template
    name: "ASRPro command"
    id: asrpro_cmd
    internal: true
    on_value:
      then:
        - lambda: |-
                if (((x=="Pong") || (x=="Ping")) && (!id(debug).state))
                        return;
                std::string state="ASRPro<--:"+x;
                id(asrpro_uart).publish_state(state.c_str());
        - uart.write: !lambda
            std::string str = x + "\r\n";
            std::vector<unsigned char> data(str.begin(), str.end());
            return data;
  - platform: template
    name: "Speaker command $device_name"
    id: speaker_state
  - platform: custom
    lambda: |-
      auto my_custom_sensor = new UartReadLineSensor(id(uart_bus));
      App.register_component(my_custom_sensor);
      return {my_custom_sensor};
    text_sensors:
      id: "uart_readline"
      on_value:
        then:
          - lambda: |-
              if ((x == "Ping") || (x == "Pong"))
              {
                      if (id(debug).state)
                              id(asrpro_uart).publish_state(x.c_str());
                      if (x == "Ping")
                      {
                              id(asrpro_cmd).publish_state("Pong");
                      }
                      id(asrpro_online).execute();
                      return;
              }

              id(asrpro_uart).publish_state(x.c_str());
              if (!strncmp(x.c_str(), "SNID:", 5))
              {
                      uint32_t id;
                      x.erase(0,5);
                      id = stoi(x);
                      id(snid).publish_state(id);
              }else if (!strncmp(x.c_str(), "Light", 5))
              {
                        x.erase(0,5);
                        if (!strcmp(x.c_str(), "TurnOn"))
                                id(light).turn_on();
                        else if (!strcmp(x.c_str(), "TurnOff"))
                                id(light).turn_off();
                        else{
                                ESP_LOGW("UART", "Unknow cmd: Light%s", x.c_str());
                                return;
                        }
              }else if (!strncmp(x.c_str(), "Brightness", 10))
              {
                      int val = id(brightness).state;
                      x.erase(0,10);
                      if (!strcmp(x.c_str(), "TurnUp"))
                      {
                              val += 10;
                              if (val > 100)
                                  val = 100;
                      }else if (!strcmp(x.c_str(), "TurnDown"))
                      {
                              val -= 10;
                              if (val < 1)
                                      val = 1;
                      }else if (!strcmp(x.c_str(), "Max"))
                              val = 100;
                      else if (!strcmp(x.c_str(), "Middle"))
                              val = 50;
                      else if (!strcmp(x.c_str(), "Min"))
                              val = 1;
                      else{
                              ESP_LOGW("UART", "Unknow cmd: Brightness%s", x.c_str());
                              return;
                      }
                      auto call = id(brightness).make_call();
                      call.set_value(val);
                      call.perform();
              }else if (!strncmp(x.c_str(), "Fan", 3))
              {
                        x.erase(0,3);
                        if (!strcmp(x.c_str(), "TurnOn"))
                                id(fan_delay).turn_on();
                        else if (!strcmp(x.c_str(), "TurnOff"))
                                id(fan_delay).turn_off();
              }else if (!strncmp(x.c_str(), "Speaker", 7))
              {
                        x.erase(0,7);
                        if (!strcmp(x.c_str(), "TurnOn"))
                                id(speaker).turn_on();
                        else if (!strcmp(x.c_str(), "TurnOff"))
                                id(speaker).turn_off();
                        else
                                id(speaker_state).publish_state(x.c_str());
              }else if (!strncmp(x.c_str(), "Volume", 6))
              {
                      int val = id(volume).state;
                      auto call = id(volume).make_call();
                      x.erase(0,6);
                      if (!strcmp(x.c_str(), "TurnUp"))
                      {
                              val += 10;
                              if (val > 100)
                                  val = 100;
                      }else if (!strcmp(x.c_str(), "TurnDown"))
                      {
                              val -= 10;
                              if (val < 1)
                                      val = 1;
                      }else if (!strcmp(x.c_str(), "Max"))
                              val = 100;
                      else if (!strcmp(x.c_str(), "Middle"))
                              val = 50;
                      else if (!strcmp(x.c_str(), "Min"))
                              val = 1;
                      call.set_value(val);
                      call.perform();
              }else if (!strncmp(x.c_str(), "Reset", 5))
              {
                      x.erase(0,5);
                      if (!strcmp(x.c_str(), "MCU"))
                         id(Reboot).turn_on();
                      else if (!strcmp(x.c_str(), "Light"))
                         id(light_reset).turn_on();
                      else if (!strcmp(x.c_str(), "Sensor"))
                         id(sensor_reset).turn_on();
              }else if (!strncmp(x.c_str(), "ASRVolume:", 10))
              {
                      uint32_t volume;
                      x.erase(0,10);
                      volume = stoi(x);
                      if (volume != id(asrpro_volume).state)
                      {
                              auto call = id(asrpro_volume).make_call();
                              call.set_value(volume);
                              call.perform();
                      }
              }else if (x == "Enable")
              {
                      id(asrpro_SR_enable).turn_on();
              }else if (x == "Disable")
              {
                      id(asrpro_SR_enable).turn_off();
              }else if (x == "DebugOn")
              {
                      id(debug).turn_on();
              }else if (x == "DebugOff")
              {
                      id(debug).turn_off();
              }else if (x == "Waiting")
              {
                      id(asrpro_cmd).publish_state("Ready");
                      if (id(connect_status).state)
                         id(asrpro_cmd).publish_state("MCUOnline");
                      else
                         id(asrpro_cmd).publish_state("MCUOffline");
                      id(asrpro_cmd).publish_state("LightExist");
                      if (id(speaker_exist).state)
                         id(asrpro_cmd).publish_state("SpeakerExist");
                      else
                         id(asrpro_cmd).publish_state("SpeakerNotExist");
                      std::string state = "ASRVolume:" + to_string((int)id(asrpro_volume).state);
                      id(asrpro_cmd).publish_state(state.c_str());
                      if (id(debug).state)
                         id(asrpro_cmd).publish_state("DebugOn");
                      else
                         id(asrpro_cmd).publish_state("DebugOff");
                      id(asrpro_cmd).publish_state("State");
              }else
                      ESP_LOGW("uart", "Unknow value: %s", x.c_str());

