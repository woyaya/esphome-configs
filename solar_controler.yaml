#------- User configure START -------
substitutions:
  #This is the name of the node. 
  #It should always be unique in your ESPhome network. 
  #May only contain lowercase characters, digits and underscores.
  device_name: solar_controler
  #If enabled, directly connects to WiFi network without doing a full scan first. 
  #This is required for hidden networks and can significantly improve connection times. 
  #The downside is that this option connects to the first network the ESP sees, 
  #even if that network is very far away and better ones are available.
  #Defaults to off. 
  wifi_fast_connect: 'false'
  #The amount of time to wait before rebooting when no WiFi connection exists. 
  #Can be disabled by setting this to 0s, but note that the low level IP stack 
  #currently seems to have issues with WiFi where a full reboot is required to 
  #get the interface back working. 
  #Defaults to 15min.
  wifi_reboot_timeout: 0s
  #The amount of time to wait before rebooting when no client connects to the API. 
  #This is needed because sometimes the low level ESP functions report that the 
  #ESP is connected to the network, when in fact it is not - only a full reboot fixes it. 
  #Can be disabled by setting this to 0s. 
  #Defaults to 15min.
  api_reboot_timeout: 0s
  
  ACpower_on_threshold: '7.5'
  ACpower_off_threshold: '13'

  default_capacitance: '660'
  default_capacitance_efficient: '0.65'
  default_dcdc_stop_voltage: '4.1'
  default_mini_power: '7.75'
#------- User configure END -------

esphome:
  name: $device_name
  platform: ESP8266
  board: esp12e
  on_boot:
    priority: 800.0
    then:
      - switch.turn_on: zigbee_rst
      - delay: 20ms
      - switch.turn_off: zigbee_rst
      - number.set:
          id: real_capacitance
          value: !lambda |-
            return id(capacitance).state * id(efficient).state;
      - sensor.template.publish:
          id: dischage_duration_realtime
          state: 0.0
      - sensor.template.publish:
          id: solar_energy_total_internal
          state: 0


external_components:
  - source: github://oxan/esphome-stream-server


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_passwd
  reboot_timeout: $wifi_reboot_timeout
#  manual_ip:
#    static_ip: 192.168.1.203
#    gateway: 192.168.1.1
#    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $device_name
    password: !secret ap_passwd

captive_portal:

# Enable logging
######################################################
# ATTENTION:                                         #
#    Disable UART logger if zigbee module enabled!!! #
######################################################
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  password: !secret api_passwd
  reboot_timeout: $api_reboot_timeout

ota:
  safe_mode: true
  password: !secret ota_passwd
  platform: esphome

time:
  - platform: sntp
    id: sntp_time
    timezone: "Asia/Shanghai"
    servers:
      - "ntp1.cloud.aliyuncs.com"
      - "ntp2.cloud.aliyuncs.com"
      - "0.pool.ntp.org"
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_month: 1
        then:
          - sensor.template.publish:
              id: solar_energy_total_internal
              state: 0

# system reset button
binary_sensor:
  - platform: gpio
    name: "Reset"
    pin: GPIO0
    internal: true
    filters:
      - invert:
      - delayed_on: 10ms
    on_press:
      then:
        - switch.toggle: Reboot
#############################################
#binary_sensor:
  - platform: gpio
    name: "Solar ACPower"
    id: ACpower
    pin: GPIO14
    filters:
      - delayed_on: 100ms
  - platform: gpio
    name: "Solar ACEn"
    pin: GPIO13
    filters:
      - delayed_on: 100ms

  - platform: template
    id: shadow_12V
    internal: true
  - platform: template
    id: shadow_AC
    internal: true

number:
  - platform: template
    name: "Solar Capacitance"
    id: capacitance
    optimistic: true
    min_value: 1
    max_value: 3000
    step: 1
    restore_value: true
    disabled_by_default: false
    initial_value: ${default_capacitance}
    update_interval: 3600s
    on_value:
      then:
        - lambda: |-
            double cap = x * id(efficient).state;
            id(real_capacitance).publish_state(cap);
  - platform: template
    name: "Solar Capacitance Efficient"
    id: efficient
    icon: "mdi:percent"
    optimistic: true
    min_value: 0.10
    max_value: 1.00
    step: 0.01
    restore_value: true
    disabled_by_default: false
    initial_value: ${default_capacitance_efficient}
    update_interval: 3600s
    on_value:
      then:
        - lambda: |-
            double cap = x * id(capacitance).state;
            id(real_capacitance).publish_state(cap);
  - platform: template
    name: "Solar Real Capacitance"
    id: real_capacitance
    optimistic: true
    min_value: 1
    max_value: 30000
    step: 1
    restore_value: false
    disabled_by_default: false
    internal: true
    update_interval: never
    on_value:
      then:
        - lambda: |-
            double energy = 0.5 * x * id(voltage_stop).state * id(voltage_stop).state;
            id(legacy_energy).publish_state(energy);
  - platform: template
    name: "Legacy energy"
    id: legacy_energy
    internal: true
    optimistic: true
    min_value: 1
    max_value: 5000000
    step: 1
    restore_value: false
    update_interval: never
  - platform: template
    name: "Solar DC-DC stop voltage"
    id: voltage_stop
    optimistic: true
    min_value: 0
    max_value: 10.0
    step: 0.1
    restore_value: true
    disabled_by_default: false
    initial_value: ${default_dcdc_stop_voltage}
    update_interval: 3600s
    on_value:
      then:
        - lambda: |-
            double energy = 0.5 * id(real_capacitance).state * x * x;
            id(legacy_energy).publish_state(energy);
  - platform: template
    name: "Solar mini dischage power"
    id: dischage_power_mini
    optimistic: true
    min_value: 3.0
    max_value: 20.0
    step: 0.01
    restore_value: true
    disabled_by_default: false
    initial_value: ${default_mini_power}
    update_interval: 3600s

sensor:
  - platform: wifi_signal
    name: "WiFi signal"
    update_interval: 10s
    filters:
      - median:
          window_size: 20
          send_every: 10
          send_first_at: 6
  - platform: uptime
    name: "${device_name} uptime"
#sensor:
  - platform: template
    name: "Mini-power discharge duration"
    id: dischage_duration_minipower
    icon: "mdi:lightning-bolt-circle"
    unit_of_measurement: "s"
    accuracy_decimals: 0
    update_interval: never
    filters:
      - delta: 60
  - platform: template
    name: "Realtime discharge duration"
    id: dischage_duration_realtime
    icon: "mdi:lightning-bolt-circle"
    unit_of_measurement: "s"
    accuracy_decimals: 0
    update_interval: never
    filters:
      - delta: 60
  - platform: template
    name: "Capacitor Energy"
    id: capacitor_energy
    icon: "mdi:solar-power"
    unit_of_measurement: "J"
    accuracy_decimals: 0
    update_interval: never
  - platform: template
    name: "Solar Energy Total internal"
    id: solar_energy_total_internal
    internal: true
    accuracy_decimals: 0
    update_interval: never
    on_value:
      then:
        - sensor.template.publish:
            id: solar_energy_total
            state: !lambda 'return x/1000;'
  - platform: template
    name: "Solar Energy Total"
    id: solar_energy_total
    icon: "mdi:solar-power"
    unit_of_measurement: "KJ"
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 0
    update_interval: never
  - platform: template
    name: "Capacitor Charge Realtime Power"
    id: charge_realtime_power
    icon: "mdi:solar-power"
    device_class: "power"
    unit_of_measurement: "W"
    accuracy_decimals: 1
    update_interval: 60s
    lambda: |-
      static double old_value = -1;
      double value;
      double power;
      value = id(capacitor_energy).state;
      if (old_value < 0)
              old_value = value;
      power = (value - old_value)/60;
      old_value = value;
      id(charge_power).publish_state(power);
      return power;
  - platform: template
    name: "Capacitor Charge Power"
    id: charge_power
    icon: "mdi:solar-power"
    device_class: "power"
    unit_of_measurement: "W"
    accuracy_decimals: 1
    update_interval: never
    filters:
      - sliding_window_moving_average:
          window_size: 13
          send_every: 5
          send_first_at: 5

  - platform: adc
    pin: A0
    name: "Solar voltage"
    id: Solar_Voltage
    update_interval: 1s
    filters:
# Data for ESP-07S with MAC (24:a1:60:2b:f2:ac)
# R11: 470.2K
# R12: 9.5247
# multiply=(R11+R12)/R12
#         =(470.2+9.5247)/9.5247
#         =50.36638
      - offset: -0.01465
      - multiply: 50
      - calibrate_linear:
        - 4.54094 -> 4.5
        - 4.93156 -> 5.0
        - 5.95695 -> 6.0
        - 7.08000 -> 7.0
        - 8.05656 -> 8.0
        - 9.03312 -> 9.0
        - 10.05852 -> 10.0
        - 11.08391 -> 11.0
        - 12.06047 -> 12.0
        - 14.99016 -> 15.0
        - 25.09758 -> 25.0
        - 26.07411 -> 26.0
        - 28.02727 -> 28.0
        - 29.00383 -> 29.0
        - 30.02922 -> 30.0
        - 31.00578 -> 31.0
        - 32.08000 -> 32.0
        - 33.05656 -> 33.0
        - 34.08195 -> 34.0
#        -  -> 35.0
#        -  -> 36.0
#        -  -> 37.0
#        -  -> 38.0
#        -  -> 39.0
#        -  -> 40.0
        - 41.11320 -> 41.0
        - 42.08977 -> 42.0
        - 43.06633 -> 43.0
        - 44.09172 -> 44.0
        - 45.11711 -> 45.0
        - 46.14250 -> 46.0
        - 47.16789 -> 47.0
        - 48.14445 -> 48.0
#      - median:
#          window_size: 23
#          send_every: 10
#          send_first_at: 6
      - sliding_window_moving_average:
          window_size: 23
          send_every: 10
          send_first_at: 6
#      - exponential_moving_average:
#          alpha: 0.2
#          send_every: 10
#          send_first_at: 6
    on_value_range:
      below: ${ACpower_on_threshold}
      then:
        - switch.turn_on: AC_DC
    on_value:
      then:
        - lambda: |-
            static double old_energy = -1;
            double energy = 0.5 * id(real_capacitance).state * x * x;
            double energy_remain = energy - id(legacy_energy).state;
            unsigned long mini;
            unsigned long real;
            if (energy_remain <= 60*id(dischage_power_mini).state)
            {
                energy_remain = 0;
                mini = 0;
                real = 0;
            }else
            {
                mini = energy_remain / id(dischage_power_mini).state; 
                if (id(charge_power).state < -5.0)
                {
                        double power = 0 - id(charge_power).state;
                        real = energy_remain / power;
                }else
                        real = id(dischage_duration_realtime).state;
            }
            id(capacitor_energy).publish_state(energy);
            id(dischage_duration_minipower).publish_state(mini);
            id(dischage_duration_realtime).publish_state(real);
            if ((old_energy < 0) || (old_energy >= energy))
                old_energy = energy;
            else
            {
                double value = id(solar_energy_total_internal).state;
                value += energy-old_energy;
                id(solar_energy_total_internal).publish_state(value);
                old_energy = energy;
            }

switch:
  - platform: restart
    name: "Solar controler reboot"
    id: Reboot
  - platform: gpio
    name: "Solar DC 24V"
    pin: GPIO5
    inverted: yes
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: gpio
    name: "Solar DC 12V internal"
    id: DC_12V
    internal: true
    pin: GPIO4
    restore_mode: ALWAYS_ON
    inverted: yes
    on_turn_on:
      - binary_sensor.template.publish:
          id: shadow_12V
          state: ON
    on_turn_off:
      - binary_sensor.template.publish:
          id: shadow_12V
          state: OFF
  - platform: gpio
    name: "Solar AC-DC internal"
    id: AC_DC
    internal: true
    pin: GPIO2
    restore_mode: ALWAYS_ON
    on_turn_on:
      - binary_sensor.template.publish:
          id: shadow_AC
          state: ON
    on_turn_off:
      - binary_sensor.template.publish:
          id: shadow_AC
          state: OFF
  - platform: gpio
    name: "Zigbee reset"
    id: zigbee_rst
    pin:
      number: GPIO12
      inverted: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      then:
        - delay: 1s
        - switch.turn_off: zigbee_rst

  - platform: template
    name: "Solar DC 12V"
    lambda: |-
      if (id(shadow_12V).state) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - switch.turn_on: DC_12V
    turn_off_action:
      if:
        condition:
          - binary_sensor.is_on: ACpower
        then:
          - switch.turn_on: AC_DC
          - delay: 300ms
          - switch.turn_off: DC_12V
  - platform: template
    name: "Solar AC power"
    lambda: |-
      if (id(shadow_AC).state) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - switch.turn_on: AC_DC
    turn_off_action:
      if:
        condition:
          sensor.in_range:
            id: Solar_Voltage
            above: ${ACpower_on_threshold}
        then:
          - switch.turn_on: DC_12V
          - delay: 300ms
          - switch.turn_off: AC_DC

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 115200

stream_server:
  uart_id: uart_bus
  port: 8880
